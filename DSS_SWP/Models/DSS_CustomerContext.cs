// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DSS_SWP.Models;

public partial class DSS_CustomerContext : DbContext
{
    public DSS_CustomerContext(DbContextOptions<DSS_CustomerContext> options)
        : base(options)
    {
    }

    public DSS_CustomerContext()
    {
        
    }
    public virtual DbSet<CertificateMainDiamond> CertificateMainDiamonds { get; set; }

    public virtual DbSet<DiamondPriceList> DiamondPriceLists { get; set; }

    public virtual DbSet<DiamondShell> DiamondShells { get; set; }

    public virtual DbSet<ExtraDiamond> ExtraDiamonds { get; set; }

    public virtual DbSet<MainDiamond> MainDiamonds { get; set; }

    public virtual DbSet<Material> Materials { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<WarrantyCertificate> WarrantyCertificates { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("data source=localhost;initial catalog=DSS_Customer;user id=sa;password=123;Integrated Security=True;TrustServerCertificate=True");
        base.OnConfiguring(optionsBuilder);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CertificateMainDiamond>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Cetificate-MainDiamond");

            entity.ToTable("Certificate-MainDiamond");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Describe)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("describe");
            entity.Property(e => e.ExpiryDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("expiry_date");
            entity.Property(e => e.IsseDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("isse_date");
            entity.Property(e => e.MainDiamondId).HasColumnName("main_diamond_id");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("type");
        });

        modelBuilder.Entity<DiamondPriceList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("diamondpricelist_id_primary");

            entity.ToTable("DiamondPriceList");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaraWeight)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("cara_weight");
            entity.Property(e => e.Clarity)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("clarity");
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("color");
            entity.Property(e => e.Cut)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("cut");
            entity.Property(e => e.Origin)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("origin");
            entity.Property(e => e.Price).HasColumnName("price");
        });

        modelBuilder.Entity<DiamondShell>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("diamond_shell_id_primary");

            entity.ToTable("Diamond_Shell");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.MaterialId).HasColumnName("material_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Weight).HasColumnName("weight");
        });

        modelBuilder.Entity<ExtraDiamond>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("extra_diamond_id_primary");

            entity.ToTable("Extra_Diamond");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<MainDiamond>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("main_diamond_id_primary");

            entity.ToTable("Main_Diamond");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.CaraWeight)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("cara_weight");
            entity.Property(e => e.Clarity)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("clarity");
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("color");
            entity.Property(e => e.Culet)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("culet");
            entity.Property(e => e.Cut)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("cut");
            entity.Property(e => e.Describe)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("describe");
            entity.Property(e => e.Fluorescence)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("fluorescence");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Measurements)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("measurements");
            entity.Property(e => e.Origin)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("origin");
            entity.Property(e => e.Polish)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("polish");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Shape)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("shape");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.Symmetry)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("symmetry");
        });

        modelBuilder.Entity<Material>(entity =>
        {
            entity.ToTable("Material");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.MaterialName)
                .HasMaxLength(50)
                .HasColumnName("material_name");
            entity.Property(e => e.Price).HasColumnName("price");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("order_id_primary");

            entity.ToTable("Order");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.OrderDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("order_date");
            entity.Property(e => e.PaymentId).HasColumnName("paymentId");
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("phone");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TotalPrice).HasColumnName("total_price");

            entity.HasOne(d => d.Payment).WithMany(p => p.Orders)
                .HasForeignKey(d => d.PaymentId)
                .HasConstraintName("FK_Order_Payment");
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("order_detail_id_primary");

            entity.ToTable("Order_Detail");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.UnitPrice).HasColumnName("unit_price");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("order_detail_order_id_foreign");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("order_detail_product_id_foreign");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("payment_id_primary");

            entity.ToTable("Payment");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateTime)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("date_time");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("payment_method");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("product_id_primary");

            entity.ToTable("Product");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DiamondShellId).HasColumnName("diamond_shell_id");
            entity.Property(e => e.ExtraDiamondId).HasColumnName("extra_diamond_id");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.MainDiamondId).HasColumnName("main_diamond_id");
            entity.Property(e => e.NumberExDiamond).HasColumnName("number_ex_diamond");
            entity.Property(e => e.PriceRate).HasColumnName("price_rate");
            entity.Property(e => e.ProductCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("product_code");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("product_name");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.DiamondShell).WithMany(p => p.Products)
                .HasForeignKey(d => d.DiamondShellId)
                .HasConstraintName("product_diamond_shell_id_foreign");

            entity.HasOne(d => d.ExtraDiamond).WithMany(p => p.Products)
                .HasForeignKey(d => d.ExtraDiamondId)
                .HasConstraintName("product_extra_diamond_id_foreign");

            entity.HasOne(d => d.MainDiamond).WithMany(p => p.Products)
                .HasForeignKey(d => d.MainDiamondId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("product_main_diamond_id_foreign");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.DateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("date_of_birth");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gender");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("password");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<WarrantyCertificate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("warranty_certificate_id_primary");

            entity.ToTable("Warranty_Certificate");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ExpiryDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("expiry_date");
            entity.Property(e => e.IssueDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("issue_date");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Product).WithMany(p => p.WarrantyCertificates)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Warranty_Certificate_Product");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}